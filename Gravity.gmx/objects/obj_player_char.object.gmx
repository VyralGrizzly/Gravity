<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_char_blue</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.35;
hsp = 0;
vsp = 0;
jumpspeed = 10;
movespeed = 5;
jump = false;

//variables for platforms
global.hsp_carry = 0;
global.vsp_carry = 0;
hsp_final = 0;

//Variables used for death 
global.flip = 1;


image_yscale = 1;


if( global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(ord('D'));
key_left = -keyboard_check(ord('A'));
key_jump = keyboard_check_pressed(vk_space);
key_grav = keyboard_check_pressed(vk_shift);
key_down = keyboard_check(ord('S'));

//animation of sprite 
if (!place_meeting(x,y+3,obj_collision) &amp;&amp; !place_meeting(x,y-3,obj_collision)){

    sprite_index = sp_char_blue_jump;
    } else{

if(key_left &lt; 0 || key_right &gt; 0) 
{
    sprite_index = sp_char_blue_walk;
    
   }else{
        if( hsp = 0) 
        {

            sprite_index = sp_char_blue; 
            image_speed = .03;
            
        }
    }
}


if(key_left &lt; 0) 
{
    image_xscale = -1;
    image_speed = .7;

}

if(key_right &gt; 0) 
{
    image_xscale = 1;
    image_speed = .7;

}


//React to inputs
global.move = key_left + key_right;
hsp = global.move * movespeed;
if (vsp &lt; 30 &amp;&amp; vsp &gt; -30) vsp += grav;


if (place_meeting(x,y+2,obj_collision)|| place_meeting(x,y-2,obj_collision))
{
    if (global.flip = 1)
    {   
        vsp = key_jump * -jumpspeed;
        
    }
    
    if (global.flip = -1)   
    {
        vsp = key_jump * jumpspeed;
       
    }
    
    if (key_grav = 1)
    {
        global.flip = global.flip * (-1);
        grav = grav * (-1);
        
        
        if (global.flip = 1) vsp = 5;
        if (global.flip = -1) vsp = -5;
        
        image_yscale = image_yscale * (-1);
    }
}



// moving platforms
hsp_final = hsp + global.hsp_carry;
vsp += global.vsp_carry;


//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_collision))
{
    while(!place_meeting(x+sign(hsp),y,obj_collision))
    {
        x += sign(hsp_final);
    }
    hsp = 0;
    hsp_final = 0;
}
x += hsp_final;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_collision))
{

    while(!place_meeting(x,y+sign(vsp),obj_collision))
    {
        y += sign(vsp);
        
    }
    vsp = 0;  
    x += global.hsp_carry;
    
}
y += vsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_dead">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sc_dead();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.300000011920929</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>10</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>66,0</point>
    <point>66,92</point>
    <point>0,92</point>
  </PhysicsShapePoints>
</object>
